@page "/Auth/Login"

@inject AuthenticationStateProvider authenticationStateProvider
@inject ILocalStorageService localStorageService
@inject NavigationManager navigationManager

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<EditForm Model="loginDto" OnValidSubmit="OnLoginFormSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label class="form-label d-block">
        Login:
        <InputText name="login" class="form-control" @bind-Value=loginDto.Login></InputText>
    </label>

    <label class="form-label d-block">
        Password:
        <InputText name="password" class="form-control" type="password" @bind-Value=loginDto.Password></InputText>
    </label>

    <button class="btn btn-success">Login</button>
</EditForm>

@code {
    public class LoginDto
    {

        [EmailAddress]
        [Required]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }
    }

    public LoginDto loginDto { get; set; } = new();

    private async Task OnLoginFormSubmitAsync(EditContext editContext)
    {
        var httpClient = new HttpClient();

        var loginResponse = await httpClient.PostAsJsonAsync("http://localhost:5000/api/Auth/Login", loginDto)

if (loginResponse.IsSuccessStatusCode && loginResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var response = await loginResponse.Content.ReadFromJsonAsync<LoginResponse>()

await localStorageService.SetItemAsStringAsync("jwt", response.AccessToken);
            await localStorageService.SetItemAsStringAsync("refreshToken", response.RefreshToken);

            await authenticationStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/");
        }
    }
}