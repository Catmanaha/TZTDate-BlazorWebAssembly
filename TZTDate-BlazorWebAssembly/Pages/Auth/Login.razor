@page "/Auth/Login"

@inject AuthenticationStateProvider authenticationStateProvider
@inject ILocalStorageService localStorageService
@inject NavigationManager navigationManager

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<EditForm Model="loginDto" OnValidSubmit="OnLoginFormSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label class="form-label d-block">
        Email:
        <InputText name="email" class="form-control" @bind-Value=loginDto.Email></InputText>
    </label>

    <label class="form-label d-block">
        Password:
        <InputText name="password" class="form-control" type="password" @bind-Value=loginDto.Password></InputText>
    </label>

    <button class="btn btn-success">Login</button>
</EditForm>

@code {
    public class LoginDto
    {

        [EmailAddress]
        [Required]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }
        public string IpAddress { get; set; }
    }

    public LoginDto loginDto { get; set; } = new();

    private async Task OnLoginFormSubmitAsync(EditContext editContext)
    {
        var httpClient = new HttpClient();

        loginDto.IpAddress = await GetIpAddress();

        var loginResponse = await httpClient.PostAsJsonAsync("http://localhost:5000/api/Auth/Login", loginDto);

        if (loginResponse.IsSuccessStatusCode && loginResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var response = await loginResponse.Content.ReadFromJsonAsync<LoginResponse>();

            await localStorageService.SetItemAsStringAsync("jwt", response.AccessToken);
            await localStorageService.SetItemAsStringAsync("refreshToken", response.RefreshToken.ToString());

            await authenticationStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/");
        }
        else
        {
            var error = await loginResponse.Content.ReadAsStringAsync();
            Console.WriteLine(error);
        }
    }

    public async Task<string> GetIpAddress()
    {
        return await GetWithCorsAsync("https://cors-anywhere.herokuapp.com/http://api.ipify.org/?format=text");
    }

    public async Task<string> GetWithCorsAsync(string url)
    {
        var corsApiHost = "cors-anywhere.herokuapp.com";
        var corsApiUrl = "https://" + corsApiHost + "/";
        var origin = "www.flirtify.tech";

        var uri = new Uri(url);
        if (uri.Host != origin && uri.Host != corsApiHost)
        {
            url = corsApiUrl + url;
        }

        var client = new HttpClient();
        client.DefaultRequestHeaders.Add("origin", origin);
        var response = await client.GetAsync(url);
        var content = await response.Content.ReadAsStringAsync();

        return content;
    }

}
